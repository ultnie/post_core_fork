/**
 * generated by Xtext 2.30.0
 */
package su.nsk.iae.post.poST.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import su.nsk.iae.post.poST.Function;
import su.nsk.iae.post.poST.InputOutputVarDeclaration;
import su.nsk.iae.post.poST.InputVarDeclaration;
import su.nsk.iae.post.poST.OutputVarDeclaration;
import su.nsk.iae.post.poST.PoSTPackage;
import su.nsk.iae.post.poST.StatementList;
import su.nsk.iae.post.poST.VarDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Function</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link su.nsk.iae.post.poST.impl.FunctionImpl#getName <em>Name</em>}</li>
 *   <li>{@link su.nsk.iae.post.poST.impl.FunctionImpl#getType <em>Type</em>}</li>
 *   <li>{@link su.nsk.iae.post.poST.impl.FunctionImpl#getFunInVars <em>Fun In Vars</em>}</li>
 *   <li>{@link su.nsk.iae.post.poST.impl.FunctionImpl#getFunOutVars <em>Fun Out Vars</em>}</li>
 *   <li>{@link su.nsk.iae.post.poST.impl.FunctionImpl#getFunInOutVars <em>Fun In Out Vars</em>}</li>
 *   <li>{@link su.nsk.iae.post.poST.impl.FunctionImpl#getFunVars <em>Fun Vars</em>}</li>
 *   <li>{@link su.nsk.iae.post.poST.impl.FunctionImpl#getStatement <em>Statement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FunctionImpl extends MinimalEObjectImpl.Container implements Function
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getFunInVars() <em>Fun In Vars</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunInVars()
   * @generated
   * @ordered
   */
  protected EList<InputVarDeclaration> funInVars;

  /**
   * The cached value of the '{@link #getFunOutVars() <em>Fun Out Vars</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunOutVars()
   * @generated
   * @ordered
   */
  protected EList<OutputVarDeclaration> funOutVars;

  /**
   * The cached value of the '{@link #getFunInOutVars() <em>Fun In Out Vars</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunInOutVars()
   * @generated
   * @ordered
   */
  protected EList<InputOutputVarDeclaration> funInOutVars;

  /**
   * The cached value of the '{@link #getFunVars() <em>Fun Vars</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunVars()
   * @generated
   * @ordered
   */
  protected EList<VarDeclaration> funVars;

  /**
   * The cached value of the '{@link #getStatement() <em>Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement()
   * @generated
   * @ordered
   */
  protected StatementList statement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FunctionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PoSTPackage.Literals.FUNCTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PoSTPackage.FUNCTION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PoSTPackage.FUNCTION__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InputVarDeclaration> getFunInVars()
  {
    if (funInVars == null)
    {
      funInVars = new EObjectContainmentEList<InputVarDeclaration>(InputVarDeclaration.class, this, PoSTPackage.FUNCTION__FUN_IN_VARS);
    }
    return funInVars;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<OutputVarDeclaration> getFunOutVars()
  {
    if (funOutVars == null)
    {
      funOutVars = new EObjectContainmentEList<OutputVarDeclaration>(OutputVarDeclaration.class, this, PoSTPackage.FUNCTION__FUN_OUT_VARS);
    }
    return funOutVars;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InputOutputVarDeclaration> getFunInOutVars()
  {
    if (funInOutVars == null)
    {
      funInOutVars = new EObjectContainmentEList<InputOutputVarDeclaration>(InputOutputVarDeclaration.class, this, PoSTPackage.FUNCTION__FUN_IN_OUT_VARS);
    }
    return funInOutVars;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<VarDeclaration> getFunVars()
  {
    if (funVars == null)
    {
      funVars = new EObjectContainmentEList<VarDeclaration>(VarDeclaration.class, this, PoSTPackage.FUNCTION__FUN_VARS);
    }
    return funVars;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StatementList getStatement()
  {
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatement(StatementList newStatement, NotificationChain msgs)
  {
    StatementList oldStatement = statement;
    statement = newStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PoSTPackage.FUNCTION__STATEMENT, oldStatement, newStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStatement(StatementList newStatement)
  {
    if (newStatement != statement)
    {
      NotificationChain msgs = null;
      if (statement != null)
        msgs = ((InternalEObject)statement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PoSTPackage.FUNCTION__STATEMENT, null, msgs);
      if (newStatement != null)
        msgs = ((InternalEObject)newStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PoSTPackage.FUNCTION__STATEMENT, null, msgs);
      msgs = basicSetStatement(newStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PoSTPackage.FUNCTION__STATEMENT, newStatement, newStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PoSTPackage.FUNCTION__FUN_IN_VARS:
        return ((InternalEList<?>)getFunInVars()).basicRemove(otherEnd, msgs);
      case PoSTPackage.FUNCTION__FUN_OUT_VARS:
        return ((InternalEList<?>)getFunOutVars()).basicRemove(otherEnd, msgs);
      case PoSTPackage.FUNCTION__FUN_IN_OUT_VARS:
        return ((InternalEList<?>)getFunInOutVars()).basicRemove(otherEnd, msgs);
      case PoSTPackage.FUNCTION__FUN_VARS:
        return ((InternalEList<?>)getFunVars()).basicRemove(otherEnd, msgs);
      case PoSTPackage.FUNCTION__STATEMENT:
        return basicSetStatement(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PoSTPackage.FUNCTION__NAME:
        return getName();
      case PoSTPackage.FUNCTION__TYPE:
        return getType();
      case PoSTPackage.FUNCTION__FUN_IN_VARS:
        return getFunInVars();
      case PoSTPackage.FUNCTION__FUN_OUT_VARS:
        return getFunOutVars();
      case PoSTPackage.FUNCTION__FUN_IN_OUT_VARS:
        return getFunInOutVars();
      case PoSTPackage.FUNCTION__FUN_VARS:
        return getFunVars();
      case PoSTPackage.FUNCTION__STATEMENT:
        return getStatement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PoSTPackage.FUNCTION__NAME:
        setName((String)newValue);
        return;
      case PoSTPackage.FUNCTION__TYPE:
        setType((String)newValue);
        return;
      case PoSTPackage.FUNCTION__FUN_IN_VARS:
        getFunInVars().clear();
        getFunInVars().addAll((Collection<? extends InputVarDeclaration>)newValue);
        return;
      case PoSTPackage.FUNCTION__FUN_OUT_VARS:
        getFunOutVars().clear();
        getFunOutVars().addAll((Collection<? extends OutputVarDeclaration>)newValue);
        return;
      case PoSTPackage.FUNCTION__FUN_IN_OUT_VARS:
        getFunInOutVars().clear();
        getFunInOutVars().addAll((Collection<? extends InputOutputVarDeclaration>)newValue);
        return;
      case PoSTPackage.FUNCTION__FUN_VARS:
        getFunVars().clear();
        getFunVars().addAll((Collection<? extends VarDeclaration>)newValue);
        return;
      case PoSTPackage.FUNCTION__STATEMENT:
        setStatement((StatementList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PoSTPackage.FUNCTION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case PoSTPackage.FUNCTION__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case PoSTPackage.FUNCTION__FUN_IN_VARS:
        getFunInVars().clear();
        return;
      case PoSTPackage.FUNCTION__FUN_OUT_VARS:
        getFunOutVars().clear();
        return;
      case PoSTPackage.FUNCTION__FUN_IN_OUT_VARS:
        getFunInOutVars().clear();
        return;
      case PoSTPackage.FUNCTION__FUN_VARS:
        getFunVars().clear();
        return;
      case PoSTPackage.FUNCTION__STATEMENT:
        setStatement((StatementList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PoSTPackage.FUNCTION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case PoSTPackage.FUNCTION__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case PoSTPackage.FUNCTION__FUN_IN_VARS:
        return funInVars != null && !funInVars.isEmpty();
      case PoSTPackage.FUNCTION__FUN_OUT_VARS:
        return funOutVars != null && !funOutVars.isEmpty();
      case PoSTPackage.FUNCTION__FUN_IN_OUT_VARS:
        return funInOutVars != null && !funInOutVars.isEmpty();
      case PoSTPackage.FUNCTION__FUN_VARS:
        return funVars != null && !funVars.isEmpty();
      case PoSTPackage.FUNCTION__STATEMENT:
        return statement != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", type: ");
    result.append(type);
    result.append(')');
    return result.toString();
  }

} //FunctionImpl
